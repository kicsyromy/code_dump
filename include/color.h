#ifndef COLOR_H
#define COLOR_H

#include <cstdint>
#include <algorithm>
#include <tuple>

template <std::uint8_t rr, std::uint8_t gg, std::uint8_t bb>
class Color
{
public:
    constexpr Color()
      : code_(from_rgb<rr, gg, bb>()), r_(rr), g_(gg), b_(bb)
    { }
    ~Color() = default;

public:
    constexpr auto code() const { return code_; }
    constexpr auto r()    const { return r_; }
    constexpr auto g()    const { return g_; }
    constexpr auto b()    const { return b_; }

private:
    const std::uint8_t code_ = 0;
    const std::uint8_t r_ = 0;
    const std::uint8_t g_ = 0;
    const std::uint8_t b_ = 0;

    using triplet = std::tuple<std::uint8_t, std::uint8_t, std::uint8_t>;

    /* This array maps the color code to it's RGB value. It contains */
    /* 248 elements since the last 8 are all black                   */
    static constexpr const triplet colors[] {
        {   0,   0,   0 }, {   0,   0, 170 },
        {   0, 170,   0 }, {   0, 170, 170 },
        { 170,   0, 170 }, { 170,  85,   0 },
        { 170, 170, 170 }, {  85,  85,  85 },
        {  85,  85, 255 }, {  85, 255,  85 },
        {  85, 255, 255 }, { 255,  85,  85 },
        { 255,  85, 255 }, { 255, 255,  85 },
        { 255, 255, 255 }, {   0,   0,   0 },
        {  20,  20,  20 }, {  32,  32,  32 },
        {  44,  44,  44 }, {  56,  56,  56 },
        {  69,  69,  69 }, {  81,  81,  81 },
        {  97,  97,  97 }, {  97,  97,  97 },
        { 113, 113, 113 }, { 130, 130, 130 },
        { 146, 146, 146 }, { 162, 162, 162 },
        { 182, 182, 182 }, { 203, 203, 203 },
        { 227, 227, 227 }, { 255, 255, 255 },
        {   0,   0, 255 }, {  65,   0, 255 },
        { 125,   0, 255 }, { 190,   0, 255 },
        { 255,   0, 255 }, { 255,   0, 190 },
        { 255,   0, 125 }, { 255,   0,  65 },
        { 255,   0,   0 }, { 255,  65,   0 },
        { 255, 125,   0 }, { 255, 190,   0 },
        { 255, 255,   0 }, { 190, 255,   0 },
        { 125, 255,   0 }, {  65, 255,   0 },
        {   0, 255,   0 }, {   0, 255,  65 },
        {   0, 255, 125 }, {   0, 255, 190 },
        {   0, 255, 255 }, {   0, 190, 255 },
        {   0, 125, 255 }, {   0,  65, 255 },
        { 125, 125, 255 }, { 158, 125, 255 },
        { 190, 125, 255 }, { 223, 125, 255 },
        { 255, 125, 255 }, { 255, 125, 223 },
        { 255, 125, 190 }, { 255, 125, 158 },
        { 255, 125, 125 }, { 255, 158, 125 },
        { 255, 190, 125 }, { 255, 223, 125 },
        { 255, 255, 125 }, { 223, 255, 125 },
        { 190, 255, 125 }, { 158, 255, 125 },
        { 125, 255, 125 }, { 125, 255, 158 },
        { 125, 255, 190 }, { 125, 255, 223 },
        { 125, 255, 255 }, { 125, 223, 255 },
        { 125, 190, 255 }, { 125, 158, 255 },
        { 182, 182, 255 }, { 199, 182, 255 },
        { 219, 182, 255 }, { 235, 182, 255 },
        { 255, 182, 255 }, { 255, 182, 235 },
        { 255, 182, 219 }, { 255, 182, 199 },
        { 255, 182, 182 }, { 255, 199, 182 },
        { 255, 219, 182 }, { 255, 235, 182 },
        { 255, 255, 182 }, { 235, 255, 182 },
        { 219, 255, 182 }, { 199, 255, 182 },
        { 182, 255, 182 }, { 182, 255, 199 },
        { 182, 255, 219 }, { 182, 255, 235 },
        { 182, 255, 255 }, { 182, 235, 255 },
        { 182, 219, 255 }, { 182, 199, 255 },
        {   0,   0, 113 }, {  28,   0, 113 },
        {  56,   0, 113 }, {  85,   0, 113 },
        { 113,   0, 113 }, { 113,   0,  85 },
        { 113,   0,  56 }, { 113,   0,  28 },
        { 113,   0,   0 }, { 113,  28,   0 },
        { 113,  56,   0 }, { 113,  85,   0 },
        { 113, 113,   0 }, {  85, 113,   0 },
        {  56, 113,   0 }, {  28, 113,   0 },
        {   0, 113,   0 }, {   0, 113,  28 },
        {   0, 113,  56 }, {   0, 113,  85 },
        {   0, 113, 113 }, {   0,  85, 113 },
        {   0,  56, 113 }, {   0,  28, 113 },
        {  56,  56, 113 }, {  69,  56, 113 },
        {  85,  56, 113 }, {  97,  56, 113 },
        { 113,  56, 113 }, { 113,  56,  97 },
        { 113,  56,  85 }, { 113,  56,  69 },
        { 113,  56,  56 }, { 113,  69,  56 },
        { 113,  85,  56 }, { 113,  97,  56 },
        { 113, 113,  56 }, {  97, 113,  56 },
        {  85, 113,  56 }, {  69, 113,  56 },
        {  56, 113,  56 }, {  56, 113,  69 },
        {  56, 113,  85 }, {  56, 113,  97 },
        {  56, 113, 113 }, {  56,  97, 113 },
        {  56,  85, 113 }, {  56,  69, 113 },
        {  81,  81, 113 }, {  89,  81, 113 },
        {  97,  81, 113 }, { 105,  81, 113 },
        { 113,  81, 113 }, { 113,  81, 105 },
        { 113,  81,  97 }, { 113,  81,  89 },
        { 113,  81,  81 }, { 113,  89,  81 },
        { 113,  97,  81 }, { 113, 105,  81 },
        { 113, 113,  81 }, { 105, 113,  81 },
        {  97, 113,  81 }, {  89, 113,  81 },
        {  81, 113,  81 }, {  81, 113,  89 },
        {  81, 113,  97 }, {  81, 113, 105 },
        {  81, 113, 113 }, {  81, 105, 113 },
        {  81,  97, 113 }, {  81,  89, 113 },
        {   0,   0,  65 }, {  16,   0,  65 },
        {  32,   0,  65 }, {  48,   0,  65 },
        {  65,   0,  65 }, {  65,   0,  48 },
        {  65,   0,  32 }, {  65,   0,  16 },
        {  65,   0,   0 }, {  65,  16,   0 },
        {  65,  32,   0 }, {  65,  48,   0 },
        {  65,  65,   0 }, {  48,  65,   0 },
        {  32,  65,   0 }, {  16,  65,   0 },
        {   0,  65,   0 }, {   0,  65,  16 },
        {   0,  65,  32 }, {   0,  65,  48 },
        {   0,  65,  65 }, {   0,  48,  65 },
        {   0,  32,  65 }, {   0,  16,  65 },
        {  32,  32,  65 }, {  40,  32,  65 },
        {  48,  32,  65 }, {  56,  32,  65 },
        {  65,  32,  65 }, {  65,  32,  56 },
        {  65,  32,  48 }, {  65,  32,  40 },
        {  65,  32,  32 }, {  65,  40,  32 },
        {  65,  48,  32 }, {  65,  56,  32 },
        {  65,  65,  32 }, {  56,  65,  32 },
        {  48,  65,  32 }, {  40,  65,  32 },
        {  32,  65,  32 }, {  32,  65,  40 },
        {  32,  65,  48 }, {  32,  65,  56 },
        {  32,  65,  65 }, {  32,  56,  65 },
        {  32,  48,  65 }, {  32,  40,  65 },
        {  44,  44,  65 }, {  48,  44,  65 },
        {  52,  44,  65 }, {  60,  44,  65 },
        {  65,  44,  65 }, {  65,  44,  60 },
        {  65,  44,  52 }, {  65,  44,  48 },
        {  65,  44,  44 }, {  65,  48,  44 },
        {  65,  52,  44 }, {  65,  60,  44 },
        {  65,  65,  44 }, {  60,  65,  44 },
        {  52,  65,  44 }, {  48,  65,  44 },
        {  44,  65,  44 }, {  44,  65,  48 },
        {  44,  65,  52 }, {  44,  65,  60 },
        {  44,  65,  65 }, {  44,  60,  65 },
        {  44,  52,  65 }, {  44,  48,  65 },
    };

    template <typename T> static constexpr auto square(T t) { return (t * t); }

    template<std::uint8_t r, std::uint8_t g, std::uint8_t b>
    static constexpr bool compare_colors(const triplet &lhs, const triplet rhs) {
        return (
            (square(std::get<0>(lhs) - r) + square(std::get<1>(lhs) - g) + square(std::get<2>(lhs) - b))
          < (square(std::get<0>(rhs) - r) + square(std::get<1>(rhs) - g) + square(std::get<2>(rhs) - b))
        );
    }

    template <std::uint8_t r, std::uint8_t g, std::uint8_t b>
    constexpr auto from_rgb()
    {
        return std::min_element(std::begin(colors), std::end(colors), &compare_colors<r,g,b>) - std::begin(colors);
    }

public:
    Color(const Color &) = delete;
    Color(Color &&) = default;
    Color &operator =(const Color) = delete;
    Color &operator =(Color &&) = default;
};

#endif // COLOR_H
