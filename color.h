#ifndef COLORS_H
#define COLORS_H

#include <cstdint>
#include <algorithm>

namespace color
{
    namespace impl
    {
        struct Color
        {
            std::uint8_t code;
            std::uint8_t r;
            std::uint8_t g;
            std::uint8_t b;
        };

        /* This array maps the color code to it's RGB value. It contains */
        /* 248 elements since the last 8 are all black                   */
        constexpr const int COLOR_INDEX_OFFSET { __LINE__ + 2};
        constexpr const Color colors[] {
            { __LINE__ - COLOR_INDEX_OFFSET,   0,   0,   0 },
            { __LINE__ - COLOR_INDEX_OFFSET,   0,   0, 170 },
            { __LINE__ - COLOR_INDEX_OFFSET,   0, 170,   0 },
            { __LINE__ - COLOR_INDEX_OFFSET,   0, 170, 170 },
            { __LINE__ - COLOR_INDEX_OFFSET, 170,   0, 170 },
            { __LINE__ - COLOR_INDEX_OFFSET, 170,  85,   0 },
            { __LINE__ - COLOR_INDEX_OFFSET, 170, 170, 170 },
            { __LINE__ - COLOR_INDEX_OFFSET,  85,  85,  85 },
            { __LINE__ - COLOR_INDEX_OFFSET,  85,  85, 255 },
            { __LINE__ - COLOR_INDEX_OFFSET,  85, 255,  85 },
            { __LINE__ - COLOR_INDEX_OFFSET,  85, 255, 255 },
            { __LINE__ - COLOR_INDEX_OFFSET, 255,  85,  85 },
            { __LINE__ - COLOR_INDEX_OFFSET, 255,  85, 255 },
            { __LINE__ - COLOR_INDEX_OFFSET, 255, 255,  85 },
            { __LINE__ - COLOR_INDEX_OFFSET, 255, 255, 255 },
            { __LINE__ - COLOR_INDEX_OFFSET,   0,   0,   0 },
            { __LINE__ - COLOR_INDEX_OFFSET,  20,  20,  20 },
            { __LINE__ - COLOR_INDEX_OFFSET,  32,  32,  32 },
            { __LINE__ - COLOR_INDEX_OFFSET,  44,  44,  44 },
            { __LINE__ - COLOR_INDEX_OFFSET,  56,  56,  56 },
            { __LINE__ - COLOR_INDEX_OFFSET,  69,  69,  69 },
            { __LINE__ - COLOR_INDEX_OFFSET,  81,  81,  81 },
            { __LINE__ - COLOR_INDEX_OFFSET,  97,  97,  97 },
            { __LINE__ - COLOR_INDEX_OFFSET,  97,  97,  97 },
            { __LINE__ - COLOR_INDEX_OFFSET, 113, 113, 113 },
            { __LINE__ - COLOR_INDEX_OFFSET, 130, 130, 130 },
            { __LINE__ - COLOR_INDEX_OFFSET, 146, 146, 146 },
            { __LINE__ - COLOR_INDEX_OFFSET, 162, 162, 162 },
            { __LINE__ - COLOR_INDEX_OFFSET, 182, 182, 182 },
            { __LINE__ - COLOR_INDEX_OFFSET, 203, 203, 203 },
            { __LINE__ - COLOR_INDEX_OFFSET, 227, 227, 227 },
            { __LINE__ - COLOR_INDEX_OFFSET, 255, 255, 255 },
            { __LINE__ - COLOR_INDEX_OFFSET,   0,   0, 255 },
            { __LINE__ - COLOR_INDEX_OFFSET,  65,   0, 255 },
            { __LINE__ - COLOR_INDEX_OFFSET, 125,   0, 255 },
            { __LINE__ - COLOR_INDEX_OFFSET, 190,   0, 255 },
            { __LINE__ - COLOR_INDEX_OFFSET, 255,   0, 255 },
            { __LINE__ - COLOR_INDEX_OFFSET, 255,   0, 190 },
            { __LINE__ - COLOR_INDEX_OFFSET, 255,   0, 125 },
            { __LINE__ - COLOR_INDEX_OFFSET, 255,   0,  65 },
            { __LINE__ - COLOR_INDEX_OFFSET, 255,   0,   0 },
            { __LINE__ - COLOR_INDEX_OFFSET, 255,  65,   0 },
            { __LINE__ - COLOR_INDEX_OFFSET, 255, 125,   0 },
            { __LINE__ - COLOR_INDEX_OFFSET, 255, 190,   0 },
            { __LINE__ - COLOR_INDEX_OFFSET, 255, 255,   0 },
            { __LINE__ - COLOR_INDEX_OFFSET, 190, 255,   0 },
            { __LINE__ - COLOR_INDEX_OFFSET, 125, 255,   0 },
            { __LINE__ - COLOR_INDEX_OFFSET,  65, 255,   0 },
            { __LINE__ - COLOR_INDEX_OFFSET,   0, 255,   0 },
            { __LINE__ - COLOR_INDEX_OFFSET,   0, 255,  65 },
            { __LINE__ - COLOR_INDEX_OFFSET,   0, 255, 125 },
            { __LINE__ - COLOR_INDEX_OFFSET,   0, 255, 190 },
            { __LINE__ - COLOR_INDEX_OFFSET,   0, 255, 255 },
            { __LINE__ - COLOR_INDEX_OFFSET,   0, 190, 255 },
            { __LINE__ - COLOR_INDEX_OFFSET,   0, 125, 255 },
            { __LINE__ - COLOR_INDEX_OFFSET,   0,  65, 255 },
            { __LINE__ - COLOR_INDEX_OFFSET, 125, 125, 255 },
            { __LINE__ - COLOR_INDEX_OFFSET, 158, 125, 255 },
            { __LINE__ - COLOR_INDEX_OFFSET, 190, 125, 255 },
            { __LINE__ - COLOR_INDEX_OFFSET, 223, 125, 255 },
            { __LINE__ - COLOR_INDEX_OFFSET, 255, 125, 255 },
            { __LINE__ - COLOR_INDEX_OFFSET, 255, 125, 223 },
            { __LINE__ - COLOR_INDEX_OFFSET, 255, 125, 190 },
            { __LINE__ - COLOR_INDEX_OFFSET, 255, 125, 158 },
            { __LINE__ - COLOR_INDEX_OFFSET, 255, 125, 125 },
            { __LINE__ - COLOR_INDEX_OFFSET, 255, 158, 125 },
            { __LINE__ - COLOR_INDEX_OFFSET, 255, 190, 125 },
            { __LINE__ - COLOR_INDEX_OFFSET, 255, 223, 125 },
            { __LINE__ - COLOR_INDEX_OFFSET, 255, 255, 125 },
            { __LINE__ - COLOR_INDEX_OFFSET, 223, 255, 125 },
            { __LINE__ - COLOR_INDEX_OFFSET, 190, 255, 125 },
            { __LINE__ - COLOR_INDEX_OFFSET, 158, 255, 125 },
            { __LINE__ - COLOR_INDEX_OFFSET, 125, 255, 125 },
            { __LINE__ - COLOR_INDEX_OFFSET, 125, 255, 158 },
            { __LINE__ - COLOR_INDEX_OFFSET, 125, 255, 190 },
            { __LINE__ - COLOR_INDEX_OFFSET, 125, 255, 223 },
            { __LINE__ - COLOR_INDEX_OFFSET, 125, 255, 255 },
            { __LINE__ - COLOR_INDEX_OFFSET, 125, 223, 255 },
            { __LINE__ - COLOR_INDEX_OFFSET, 125, 190, 255 },
            { __LINE__ - COLOR_INDEX_OFFSET, 125, 158, 255 },
            { __LINE__ - COLOR_INDEX_OFFSET, 182, 182, 255 },
            { __LINE__ - COLOR_INDEX_OFFSET, 199, 182, 255 },
            { __LINE__ - COLOR_INDEX_OFFSET, 219, 182, 255 },
            { __LINE__ - COLOR_INDEX_OFFSET, 235, 182, 255 },
            { __LINE__ - COLOR_INDEX_OFFSET, 255, 182, 255 },
            { __LINE__ - COLOR_INDEX_OFFSET, 255, 182, 235 },
            { __LINE__ - COLOR_INDEX_OFFSET, 255, 182, 219 },
            { __LINE__ - COLOR_INDEX_OFFSET, 255, 182, 199 },
            { __LINE__ - COLOR_INDEX_OFFSET, 255, 182, 182 },
            { __LINE__ - COLOR_INDEX_OFFSET, 255, 199, 182 },
            { __LINE__ - COLOR_INDEX_OFFSET, 255, 219, 182 },
            { __LINE__ - COLOR_INDEX_OFFSET, 255, 235, 182 },
            { __LINE__ - COLOR_INDEX_OFFSET, 255, 255, 182 },
            { __LINE__ - COLOR_INDEX_OFFSET, 235, 255, 182 },
            { __LINE__ - COLOR_INDEX_OFFSET, 219, 255, 182 },
            { __LINE__ - COLOR_INDEX_OFFSET, 199, 255, 182 },
            { __LINE__ - COLOR_INDEX_OFFSET, 182, 255, 182 },
            { __LINE__ - COLOR_INDEX_OFFSET, 182, 255, 199 },
            { __LINE__ - COLOR_INDEX_OFFSET, 182, 255, 219 },
            { __LINE__ - COLOR_INDEX_OFFSET, 182, 255, 235 },
            { __LINE__ - COLOR_INDEX_OFFSET, 182, 255, 255 },
            { __LINE__ - COLOR_INDEX_OFFSET, 182, 235, 255 },
            { __LINE__ - COLOR_INDEX_OFFSET, 182, 219, 255 },
            { __LINE__ - COLOR_INDEX_OFFSET, 182, 199, 255 },
            { __LINE__ - COLOR_INDEX_OFFSET,   0,   0, 113 },
            { __LINE__ - COLOR_INDEX_OFFSET,  28,   0, 113 },
            { __LINE__ - COLOR_INDEX_OFFSET,  56,   0, 113 },
            { __LINE__ - COLOR_INDEX_OFFSET,  85,   0, 113 },
            { __LINE__ - COLOR_INDEX_OFFSET, 113,   0, 113 },
            { __LINE__ - COLOR_INDEX_OFFSET, 113,   0,  85 },
            { __LINE__ - COLOR_INDEX_OFFSET, 113,   0,  56 },
            { __LINE__ - COLOR_INDEX_OFFSET, 113,   0,  28 },
            { __LINE__ - COLOR_INDEX_OFFSET, 113,   0,   0 },
            { __LINE__ - COLOR_INDEX_OFFSET, 113,  28,   0 },
            { __LINE__ - COLOR_INDEX_OFFSET, 113,  56,   0 },
            { __LINE__ - COLOR_INDEX_OFFSET, 113,  85,   0 },
            { __LINE__ - COLOR_INDEX_OFFSET, 113, 113,   0 },
            { __LINE__ - COLOR_INDEX_OFFSET,  85, 113,   0 },
            { __LINE__ - COLOR_INDEX_OFFSET,  56, 113,   0 },
            { __LINE__ - COLOR_INDEX_OFFSET,  28, 113,   0 },
            { __LINE__ - COLOR_INDEX_OFFSET,   0, 113,   0 },
            { __LINE__ - COLOR_INDEX_OFFSET,   0, 113,  28 },
            { __LINE__ - COLOR_INDEX_OFFSET,   0, 113,  56 },
            { __LINE__ - COLOR_INDEX_OFFSET,   0, 113,  85 },
            { __LINE__ - COLOR_INDEX_OFFSET,   0, 113, 113 },
            { __LINE__ - COLOR_INDEX_OFFSET,   0,  85, 113 },
            { __LINE__ - COLOR_INDEX_OFFSET,   0,  56, 113 },
            { __LINE__ - COLOR_INDEX_OFFSET,   0,  28, 113 },
            { __LINE__ - COLOR_INDEX_OFFSET,  56,  56, 113 },
            { __LINE__ - COLOR_INDEX_OFFSET,  69,  56, 113 },
            { __LINE__ - COLOR_INDEX_OFFSET,  85,  56, 113 },
            { __LINE__ - COLOR_INDEX_OFFSET,  97,  56, 113 },
            { __LINE__ - COLOR_INDEX_OFFSET, 113,  56, 113 },
            { __LINE__ - COLOR_INDEX_OFFSET, 113,  56,  97 },
            { __LINE__ - COLOR_INDEX_OFFSET, 113,  56,  85 },
            { __LINE__ - COLOR_INDEX_OFFSET, 113,  56,  69 },
            { __LINE__ - COLOR_INDEX_OFFSET, 113,  56,  56 },
            { __LINE__ - COLOR_INDEX_OFFSET, 113,  69,  56 },
            { __LINE__ - COLOR_INDEX_OFFSET, 113,  85,  56 },
            { __LINE__ - COLOR_INDEX_OFFSET, 113,  97,  56 },
            { __LINE__ - COLOR_INDEX_OFFSET, 113, 113,  56 },
            { __LINE__ - COLOR_INDEX_OFFSET,  97, 113,  56 },
            { __LINE__ - COLOR_INDEX_OFFSET,  85, 113,  56 },
            { __LINE__ - COLOR_INDEX_OFFSET,  69, 113,  56 },
            { __LINE__ - COLOR_INDEX_OFFSET,  56, 113,  56 },
            { __LINE__ - COLOR_INDEX_OFFSET,  56, 113,  69 },
            { __LINE__ - COLOR_INDEX_OFFSET,  56, 113,  85 },
            { __LINE__ - COLOR_INDEX_OFFSET,  56, 113,  97 },
            { __LINE__ - COLOR_INDEX_OFFSET,  56, 113, 113 },
            { __LINE__ - COLOR_INDEX_OFFSET,  56,  97, 113 },
            { __LINE__ - COLOR_INDEX_OFFSET,  56,  85, 113 },
            { __LINE__ - COLOR_INDEX_OFFSET,  56,  69, 113 },
            { __LINE__ - COLOR_INDEX_OFFSET,  81,  81, 113 },
            { __LINE__ - COLOR_INDEX_OFFSET,  89,  81, 113 },
            { __LINE__ - COLOR_INDEX_OFFSET,  97,  81, 113 },
            { __LINE__ - COLOR_INDEX_OFFSET, 105,  81, 113 },
            { __LINE__ - COLOR_INDEX_OFFSET, 113,  81, 113 },
            { __LINE__ - COLOR_INDEX_OFFSET, 113,  81, 105 },
            { __LINE__ - COLOR_INDEX_OFFSET, 113,  81,  97 },
            { __LINE__ - COLOR_INDEX_OFFSET, 113,  81,  89 },
            { __LINE__ - COLOR_INDEX_OFFSET, 113,  81,  81 },
            { __LINE__ - COLOR_INDEX_OFFSET, 113,  89,  81 },
            { __LINE__ - COLOR_INDEX_OFFSET, 113,  97,  81 },
            { __LINE__ - COLOR_INDEX_OFFSET, 113, 105,  81 },
            { __LINE__ - COLOR_INDEX_OFFSET, 113, 113,  81 },
            { __LINE__ - COLOR_INDEX_OFFSET, 105, 113,  81 },
            { __LINE__ - COLOR_INDEX_OFFSET,  97, 113,  81 },
            { __LINE__ - COLOR_INDEX_OFFSET,  89, 113,  81 },
            { __LINE__ - COLOR_INDEX_OFFSET,  81, 113,  81 },
            { __LINE__ - COLOR_INDEX_OFFSET,  81, 113,  89 },
            { __LINE__ - COLOR_INDEX_OFFSET,  81, 113,  97 },
            { __LINE__ - COLOR_INDEX_OFFSET,  81, 113, 105 },
            { __LINE__ - COLOR_INDEX_OFFSET,  81, 113, 113 },
            { __LINE__ - COLOR_INDEX_OFFSET,  81, 105, 113 },
            { __LINE__ - COLOR_INDEX_OFFSET,  81,  97, 113 },
            { __LINE__ - COLOR_INDEX_OFFSET,  81,  89, 113 },
            { __LINE__ - COLOR_INDEX_OFFSET,   0,   0,  65 },
            { __LINE__ - COLOR_INDEX_OFFSET,  16,   0,  65 },
            { __LINE__ - COLOR_INDEX_OFFSET,  32,   0,  65 },
            { __LINE__ - COLOR_INDEX_OFFSET,  48,   0,  65 },
            { __LINE__ - COLOR_INDEX_OFFSET,  65,   0,  65 },
            { __LINE__ - COLOR_INDEX_OFFSET,  65,   0,  48 },
            { __LINE__ - COLOR_INDEX_OFFSET,  65,   0,  32 },
            { __LINE__ - COLOR_INDEX_OFFSET,  65,   0,  16 },
            { __LINE__ - COLOR_INDEX_OFFSET,  65,   0,   0 },
            { __LINE__ - COLOR_INDEX_OFFSET,  65,  16,   0 },
            { __LINE__ - COLOR_INDEX_OFFSET,  65,  32,   0 },
            { __LINE__ - COLOR_INDEX_OFFSET,  65,  48,   0 },
            { __LINE__ - COLOR_INDEX_OFFSET,  65,  65,   0 },
            { __LINE__ - COLOR_INDEX_OFFSET,  48,  65,   0 },
            { __LINE__ - COLOR_INDEX_OFFSET,  32,  65,   0 },
            { __LINE__ - COLOR_INDEX_OFFSET,  16,  65,   0 },
            { __LINE__ - COLOR_INDEX_OFFSET,   0,  65,   0 },
            { __LINE__ - COLOR_INDEX_OFFSET,   0,  65,  16 },
            { __LINE__ - COLOR_INDEX_OFFSET,   0,  65,  32 },
            { __LINE__ - COLOR_INDEX_OFFSET,   0,  65,  48 },
            { __LINE__ - COLOR_INDEX_OFFSET,   0,  65,  65 },
            { __LINE__ - COLOR_INDEX_OFFSET,   0,  48,  65 },
            { __LINE__ - COLOR_INDEX_OFFSET,   0,  32,  65 },
            { __LINE__ - COLOR_INDEX_OFFSET,   0,  16,  65 },
            { __LINE__ - COLOR_INDEX_OFFSET,  32,  32,  65 },
            { __LINE__ - COLOR_INDEX_OFFSET,  40,  32,  65 },
            { __LINE__ - COLOR_INDEX_OFFSET,  48,  32,  65 },
            { __LINE__ - COLOR_INDEX_OFFSET,  56,  32,  65 },
            { __LINE__ - COLOR_INDEX_OFFSET,  65,  32,  65 },
            { __LINE__ - COLOR_INDEX_OFFSET,  65,  32,  56 },
            { __LINE__ - COLOR_INDEX_OFFSET,  65,  32,  48 },
            { __LINE__ - COLOR_INDEX_OFFSET,  65,  32,  40 },
            { __LINE__ - COLOR_INDEX_OFFSET,  65,  32,  32 },
            { __LINE__ - COLOR_INDEX_OFFSET,  65,  40,  32 },
            { __LINE__ - COLOR_INDEX_OFFSET,  65,  48,  32 },
            { __LINE__ - COLOR_INDEX_OFFSET,  65,  56,  32 },
            { __LINE__ - COLOR_INDEX_OFFSET,  65,  65,  32 },
            { __LINE__ - COLOR_INDEX_OFFSET,  56,  65,  32 },
            { __LINE__ - COLOR_INDEX_OFFSET,  48,  65,  32 },
            { __LINE__ - COLOR_INDEX_OFFSET,  40,  65,  32 },
            { __LINE__ - COLOR_INDEX_OFFSET,  32,  65,  32 },
            { __LINE__ - COLOR_INDEX_OFFSET,  32,  65,  40 },
            { __LINE__ - COLOR_INDEX_OFFSET,  32,  65,  48 },
            { __LINE__ - COLOR_INDEX_OFFSET,  32,  65,  56 },
            { __LINE__ - COLOR_INDEX_OFFSET,  32,  65,  65 },
            { __LINE__ - COLOR_INDEX_OFFSET,  32,  56,  65 },
            { __LINE__ - COLOR_INDEX_OFFSET,  32,  48,  65 },
            { __LINE__ - COLOR_INDEX_OFFSET,  32,  40,  65 },
            { __LINE__ - COLOR_INDEX_OFFSET,  44,  44,  65 },
            { __LINE__ - COLOR_INDEX_OFFSET,  48,  44,  65 },
            { __LINE__ - COLOR_INDEX_OFFSET,  52,  44,  65 },
            { __LINE__ - COLOR_INDEX_OFFSET,  60,  44,  65 },
            { __LINE__ - COLOR_INDEX_OFFSET,  65,  44,  65 },
            { __LINE__ - COLOR_INDEX_OFFSET,  65,  44,  60 },
            { __LINE__ - COLOR_INDEX_OFFSET,  65,  44,  52 },
            { __LINE__ - COLOR_INDEX_OFFSET,  65,  44,  48 },
            { __LINE__ - COLOR_INDEX_OFFSET,  65,  44,  44 },
            { __LINE__ - COLOR_INDEX_OFFSET,  65,  48,  44 },
            { __LINE__ - COLOR_INDEX_OFFSET,  65,  52,  44 },
            { __LINE__ - COLOR_INDEX_OFFSET,  65,  60,  44 },
            { __LINE__ - COLOR_INDEX_OFFSET,  65,  65,  44 },
            { __LINE__ - COLOR_INDEX_OFFSET,  60,  65,  44 },
            { __LINE__ - COLOR_INDEX_OFFSET,  52,  65,  44 },
            { __LINE__ - COLOR_INDEX_OFFSET,  48,  65,  44 },
            { __LINE__ - COLOR_INDEX_OFFSET,  44,  65,  44 },
            { __LINE__ - COLOR_INDEX_OFFSET,  44,  65,  48 },
            { __LINE__ - COLOR_INDEX_OFFSET,  44,  65,  52 },
            { __LINE__ - COLOR_INDEX_OFFSET,  44,  65,  60 },
            { __LINE__ - COLOR_INDEX_OFFSET,  44,  65,  65 },
            { __LINE__ - COLOR_INDEX_OFFSET,  44,  60,  65 },
            { __LINE__ - COLOR_INDEX_OFFSET,  44,  52,  65 },
            { __LINE__ - COLOR_INDEX_OFFSET,  44,  48,  65 },
        };

        template <typename T>
        constexpr auto square(T t) { return (t * t); }

        template<std::uint8_t r, std::uint8_t g, std::uint8_t b>
        constexpr bool compare_colors(const Color &lhs, const Color rhs)
        {
            return (
                (square(lhs.r - r) + square(lhs.g - g) + square(lhs.b - b))
              < (square(rhs.r - r) + square(rhs.g - g) + square(rhs.b - b))
            );
        }

    }

    template <std::uint8_t r, std::uint8_t g, std::uint8_t b>
    constexpr auto from_rgb()
    {
        return std::min_element(std::begin(impl::colors), std::end(impl::colors), &impl::compare_colors<r,g,b>)->code;
    }
}

#endif // COLORS_H
